<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="keywords" content="Jackal, Game">
    <meta name="description" content="Jackal Game">
    <link rel="icon" href="~/favicon.ico?20417786499" type="image/x-icon">
    <title>Jackal</title>
    @Styles.Render("~/bundle/styles")
    @Scripts.Render("~/bundle/scripts")

    <script src="~/Scripts/Chart.min.js"></script>

    <style type="text/css">

        body { width: 100%; background-color: lightgray; }
        #top-menu { background-color: white; }
        #js-graph-panel { background-color: white; }
        .dice_img {width: 100%; height: 100%; }
        #js-button-dice { background-color: lightgray; }
        .p20 { padding: 20px; }
        .p15 { padding: 15px; }
        .p10 { padding: 10px; }
        .p5 { padding: 5px; }
        .m10 { margin: 10px; }
        .m5 { margin: 5px; }
        .pt10 { padding-top: 10px; }
        .pt20 { padding-top: 20px; }
        .ml5 { margin-left: 5px; }

        ul.menu li {
            display: inline; /* Отображать как строчный элемент */
            padding: 15px;
        }
 
    </style>

</head>
<body>

    <div class="container col-xs-12 col-lg-2">

        <div id="top-menu" class="row">
            <div class="js-menu-button p15 pull-left" data-panel="js-button-dice" style="cursor:pointer; display: none;" href="#">DICE</div>
            <div class="js-menu-button p15 pull-left" data-panel="js-graph-panel" style="cursor:pointer;">GRAPH</div>
            <div class="js-menu-button p15 pull-left" data-panel="js-dice-options" style="cursor:pointer;">OPT</div>
            <div id="js-error-limit" class="p15 pull-right">-1</div>
            <div id="js-rolls-count" class="p15 pull-right">0</div>
        </div>

        <div class="js-menu-panel row" id="js-button-dice" style="height: 100%;">
            <div class="row">
                <div class="col-xs-6" style="padding: 15px;">
                    <img id="js-first-dice" class="dice_img"  />
                </div>
                <div class="col-xs-6" style="padding: 15px;">
                    <img id="js-second-dice" class="dice_img" />
                </div>
            </div>

            <div class="row text-center">
                <span id="js-sum-dice" style="font-size: 200px;"></span>
            </div>
        </div>

        <div id="js-graph-panel" class="js-menu-panel row" style="display: none;">

            <button class="js-calc-chart p5 m5">36</button>
            <button class="js-calc-chart p5 m5">72</button>
            <button class="js-calc-chart p5 m5">100</button>
            <button class="js-calc-chart p5 m5">108</button>
            <button class="js-calc-chart p5 m5">144</button>
            <button class="js-calc-chart p5 m5">1000</button>
            <button class="js-calc-chart p5 m5">10000</button>
            <button class="js-calc-chart p5 m5">100000</button>
            <button class="js-calc-chart p5 m5">1000000</button>
            <button class="js-custom-mode p5 m5">custom</button>
            <canvas id="myChart" class="col-xs-12" height="400"></canvas>

        </div>

        <div id="js-dice-options" class="js-menu-panel row" style="display: none;">

            <div class="row pt20">
                <div class="col-xs-12">
                    <label class="col-xs-12">Уровень контроля за ошибками</label>
                    <button class="js-dice-err-contol p5 m5" data-err-level="0">0</button>
                    <button class="js-dice-err-contol p5 m5" data-err-level="1">1</button>
                    <button class="js-dice-err-contol p5 m5" data-err-level="2">2</button>
                    <button class="js-dice-err-contol p5 m5" data-err-level="-1">-1</button>
                </div>
            </div>

            <div class="row pt20">
                <div class="col-xs-12">
                    <button class="js-custom-mode p5 m5">сброс статистики</button>
                </div>
            </div>

            <div class="row pt20">
                <div class="col-xs-12">
                    <label class="col-xs-12">Режим</label>
                    <button class="js-dice-mode p5 m5" data-mode-number="0">простой</button>
                    <button class="js-dice-mode p5 m5" data-mode-number="1">умный</button>
                </div>
            </div>

            <div class="row pt20">
                <div class="col-xs-12">
                    <div class="p5 m5">
                        <input type="checkbox" id="js-mode-repeat-reduce" checked="checked" /><label for="js-mode-repeat-reduce" class="ml5">Уменьшение повторов</label>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <script>

        var myLineChart = null;

        $(document).ready(function () {

            $('#js-button-dice').click(rollDice);

            $('.js-menu-button').click(function () {

                $('.js-menu-panel').hide();
                $('#' + $(this).data('panel')).show();
                $('.js-menu-button').show();
                $(this).hide();
            });

            $('.js-dice-err-contol').click(function () {
                DiceRoller.errorLimit = parseInt($(this).data('err-level'));
                if (DiceRoller.mode == 1) {
                    $('#js-error-limit').text('sm');
                }
                else {
                    $('#js-error-limit').text(DiceRoller.errorLimit);
                }
            });

            $('.js-dice-mode').click(function () {
                DiceRoller.setMode(parseInt($(this).data('mode-number')));
                if (DiceRoller.mode == 1) {
                    $('#js-error-limit').text('sm');
                }
                else {
                    $('#js-error-limit').text(DiceRoller.errorLimit);
                }
            });

            $('#js-mode-repeat-reduce').change(function () {
                DiceRoller.repeatReduce = $(this).is(':checked');
                alert(DiceRoller.repeatReduce);
            });

            $('.js-custom-mode').click(function () {

                var customStat = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                DiceRoller.reset();

                $('#js-rolls-count').text(DiceRoller.rollsCount);

                if (myLineChart == null) {
                    myLineChart = createChart(customStat);
                }
                else {
                    for (var i = 0 ; i < customStat.length; ++i) {
                        myLineChart.datasets[0].points[i].value = customStat[i];
                    }
                    myLineChart.update();
                }
            });

            $('.js-calc-chart').click(function () {

                if (myLineChart == null) {
                    myLineChart = createChart(getChartData(parseInt($(this).text())));
                }
                else {
                    var arr = getChartData(parseInt($(this).text()));
                    for (var i = 0 ; i < arr.length; ++i) {
                        myLineChart.datasets[0].points[i].value = arr[i];
                    }
                    myLineChart.update();
                }
                $('#js-rolls-count').text(DiceRoller.rollsCount);
            });

            myLineChart = createChart([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
            rollDice();
        });


        function rollDice() {

            var dc = DiceRoller.getRandomDice();

            $('#js-first-dice').fadeOut("slow");
            $('#js-second-dice').fadeOut("slow");
            $('#js-sum-dice').fadeOut("slow", function () {
                updateDice($('#js-first-dice'), dc.one);
                updateDice($('#js-second-dice'), dc.two);
                $('#js-sum-dice').text(dc.one + dc.two).fadeIn("slow");
                $('#js-first-dice').fadeIn("slow");
                $('#js-second-dice').fadeIn("slow");
            })

            $('#js-rolls-count').text(DiceRoller.rollsCount);

            myLineChart.datasets[0].points[dc.one + dc.two - 2].value++;
            myLineChart.update();
        }

        function updateDice(elm, digit) {

            elm.attr('src', '/Content/Pictures/dice_' + digit + '_small.png');
        }



        function createChart(chartdata) {

            var options = {

                ///Boolean - Whether grid lines are shown across the chart
                scaleShowGridLines: true,

                //String - Colour of the grid lines
                scaleGridLineColor: "rgba(0,0,0,.05)",

                //Number - Width of the grid lines
                scaleGridLineWidth: 1,

                //Boolean - Whether to show horizontal lines (except X axis)
                scaleShowHorizontalLines: true,

                //Boolean - Whether to show vertical lines (except Y axis)
                scaleShowVerticalLines: true,

                //Boolean - Whether the line is curved between points
                bezierCurve: true,

                //Number - Tension of the bezier curve between points
                bezierCurveTension: 0.4,

                //Boolean - Whether to show a dot for each point
                pointDot: true,

                //Number - Radius of each point dot in pixels
                pointDotRadius: 4,

                //Number - Pixel width of point dot stroke
                pointDotStrokeWidth: 1,

                //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
                pointHitDetectionRadius: 20,

                //Boolean - Whether to show a stroke for datasets
                datasetStroke: true,

                //Number - Pixel width of dataset stroke
                datasetStrokeWidth: 2,

                //Boolean - Whether to fill the dataset with a colour
                datasetFill: true,

                //String - A legend template
                legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].strokeColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"

            };

            var ctx = document.getElementById("myChart").getContext("2d");


            var data = {
                labels: ["2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
                datasets: [
                    {
                        label: "My First dataset",
                        fillColor: "rgba(220,220,220,0.2)",
                        strokeColor: "rgba(220,220,220,1)",
                        pointColor: "rgba(220,220,220,1)",
                        pointStrokeColor: "#fff",
                        pointHighlightFill: "#fff",
                        pointHighlightStroke: "rgba(220,220,220,1)",
                        data: chartdata
                    }
                ]
            };

            return new Chart(ctx).Line(data, options);

        }

        function getChartData(num) {

            var ret = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            DiceRoller.reset();

            for (var i = 0 ; i < num ; ++i) {
                var dc = DiceRoller.getRandomDice();
                ret[dc.one + dc.two - 2]++;
            }

            return ret;
        }


        var DiceRoller = {

            errorLimit: -1,
            repeatReduce: true,
            mode: 0,
            rollsCount: 0,
            hstory: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            normal: [1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1],
            lastNumber: 0,

            reset: function () {
                this.rollsCount = 0;
                this.hstory = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            },

            setMode: function (num) {
                
                if (num == 1) {
                    this.mode = 1;
                    this.normal = [3, 6, 9, 12, 15, 18, 15, 12, 9, 6, 3];

                    for (var i=0 ; i < 36 ; i++) {
                        this.normal[this.getRollResult().sum() -2]++;
                    }
                }
                else {
                    this.mode = 0;
                    this.normal = [1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1];
                }
            },

            getRandomDice: function() {

                var ret = this.getPrivateRandomDice();

                if (this.repeatReduce && (this.lastNumber == ret.sum())) {

                    ret = this.getPrivateRandomDice();
                }

                this.lastNumber = ret.sum();
                this.hstory[this.lastNumber - 2]++;
                this.rollsCount++;

                return ret;
            },

            getPrivateRandomDice: function () {

                if (this.mode == 1) {
                    if (this.rollsCount >= 144) {
                        return this.getRollResult();
                    }
                    else {
                        var rl = this.getRollResult();

                        var idx = rl.sum() - 2;
                        while (this.hstory[idx] >= this.normal[idx]) {

                            rl = this.getRollResult();
                            idx = rl.sum() - 2;
                        }
                        return rl;
                    }
                }

                var roll = this.getRollResult();

                if (this.errorLimit > -1) {

                    var index = roll.sum() - 2;
                    var mul = Math.floor(this.rollsCount / 36) + 1;

                    while ((this.hstory[index] - (this.normal[index] * mul)) >= this.errorLimit) {

                        roll = this.getRollResult();
                        index = roll.sum() - 2;
                    }
                }

                return roll;
            },

            getRollResult: function () {
                return {
                    one: this.getRandomInt(1, 6),
                    two: this.getRandomInt(1, 6),
                    sum: function () {
                        return (this.one + this.two);
                    }
                };
            },

            getRandomInt: function (min, max) {
                return Math.floor(Math.random() * (max - min + 1)) + min;
            }
        }



    </script>
</body>
</html>
